apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'application'
apply plugin: 'sonar'

version = '1.1-SNAPSHOT'
group = 'ru.socionicasys'
mainClassName = 'ru.socionicasys.analyst.Analyst'
sourceCompatibility = '1.6'

def compileOptions = [compileJava, compileTestJava].options
compileOptions*.encoding = 'UTF-8'

// По-умолчанию запускается release-конфигурация. Если среди тасков есть debug,
// сбока переключается на debug-конфигурацию
gradle.taskGraph.whenReady { taskGraph ->
	if (taskGraph.hasTask(':debug')) {
		compileOptions*.debug = true
		sourceSets.main.output.classesDir = file("$buildDir/classes-debug/main")
	} else {
		compileOptions*.debug = false
	}
}

repositories {
	mavenCentral()
}

dependencies {
	compile 'org.slf4j:slf4j-api:1.6.1'
	compile 'org.swinglabs:swingx-core:1.6.2-2'
	runtime 'ch.qos.logback:logback-classic:0.9.29'
}

def sharedManifest = manifest {
	attributes 'Main-Class': mainClassName, 'Specification-Version': version
}

jar {
	manifest = sharedManifest
}

task jarDependencies(type: Jar, dependsOn: compileJava) {
	classifier = 'deps'
	destinationDir = distsDir
	from sourceSets.main.output
	from {
		configurations.runtime.collect {
			it.isDirectory() ? it : zipTree(it).matching {
				exclude 'META-INF/maven/**'
			}
		}
	}
	manifest = sharedManifest
}

task syncLibs(type: Sync) {
	from configurations.runtime
	into file('lib')
}

task debug(dependsOn: run)

task wrapper(type: Wrapper) {
	gradleVersion = '1.0-milestone-4'
}

idea {
	project.ipr.withXml { provider ->
		provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping.@vcs = 'Git'
	}

	module {
		excludeDirs += file('gradle')
	}
}

sonar {
	projectDependencies = project.configurations.runtime.resolve()
	projectProperty 'sonar.sourceEncoding', 'UTF-8'
}
